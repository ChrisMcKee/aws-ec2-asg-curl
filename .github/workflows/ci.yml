name: CI

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version"
        required: true
        type: string
  push:
    branches:
      - main
      - master
  pull_request:

permissions:
  contents: write

jobs:
  build-and-test:
    if: github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: Run make all
        run: make all

      - name: Run make coverage
        run: make coverage

      - name: Upload coverage as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: build/coverage.html
          if-no-files-found: warn

  release:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: Run make all
        run: make all

      - name: Run make coverage
        run: make coverage

      - name: Upload coverage as artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: build/coverage.html
          if-no-files-found: warn

      - name: Run make cross-build
        run: make cross-build

      - name: Upload dist as artifact
        uses: actions/upload-artifact@v4
        with:
          name: aws-ec2-asg-curl
          path: dist/
          if-no-files-found: error

      - name: Configure git for CI
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Tag release and push
        env:
          VERSION: ${{ github.event.inputs.version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag -a "$VERSION" -m "$VERSION"
          git push origin "$VERSION"

      - name: Create GitHub Release
        id: create_release
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const version = process.env.VERSION || '${{ github.event.inputs.version }}';
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: version,
              name: `Release ${version}`,
              draft: false,
              prerelease: false
            });
            core.setOutput('upload_url', release.upload_url);
          result-encoding: string

      - name: Upload release assets
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const uploadUrl = '${{ steps.create_release.outputs.upload_url }}';
            const distDir = './dist';
            const files = fs.readdirSync(distDir);
            for (const file of files) {
              const filePath = path.join(distDir, file);
              const stat = fs.statSync(filePath);
              if (!stat.isFile()) continue;
              const content = fs.readFileSync(filePath);
              const name = path.basename(filePath);
              const headers = {
                'content-type': 'application/octet-stream',
                'content-length': content.length
              };
              console.log(`Uploading ${name}...`);
              await github.request('POST ' + uploadUrl.replace('{?name,label}', `?name=${encodeURIComponent(name)}`), {
                headers,
                data: content
              });
            }
